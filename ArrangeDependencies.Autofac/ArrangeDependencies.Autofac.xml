<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArrangeDependencies.Autofac</name>
    </assembly>
    <members>
        <member name="M:ArrangeDependencies.Autofac.Arrange.Dependencies``2(System.Action{ArrangeDependencies.Core.Interfaces.IArrangeBuilder{Autofac.ContainerBuilder}})">
            <summary>
            Looosly configure T dependencies, if you don't define the dependency it will default to a mock of the dependency
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:ArrangeDependencies.Autofac.ArrangeDependencies.Config``2(System.Action{ArrangeDependencies.Core.Interfaces.IArrangeBuilder{Autofac.ContainerBuilder}})">
            <summary>
            Looosly configure T dependencies, if you don't define the dependency it will default to a mock of the dependency
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config"></param>
            <returns></returns>
            
        </member>
        <member name="M:ArrangeDependencies.Autofac.Extensions.UseContainerBuilderExtension.UseContainerBuilder(ArrangeDependencies.Core.Interfaces.IArrangeBuilder{Autofac.ContainerBuilder},System.Action{Autofac.ContainerBuilder})">
            <summary>
            Difine dependency via the AutoFac Cointainer builder.
            </summary>
            <param name="arrangeBuilder"></param>
            <param name="dependency"></param>
            <returns></returns>
        </member>
        <member name="M:ArrangeDependencies.Autofac.Extensions.UseImplementationExtension.UseImplementation``2(ArrangeDependencies.Core.Interfaces.IArrangeBuilder{Autofac.ContainerBuilder})">
            <summary>
            Define an implementation for a interface. 
            If the implementation has undefined dependencies they will default to Mock.Of&lt;T&gt;
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <param name="arrangeBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:ArrangeDependencies.Autofac.Extensions.UseImplementationsOfExtension.UseImplementationsOf``1(ArrangeDependencies.Core.Interfaces.IArrangeBuilder{Autofac.ContainerBuilder})">
            <summary>
            Using all implementations of T in the assembly of T
            </summary>
            <typeparam name="TInterface"></typeparam>
            <param name="arrangeBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:ArrangeDependencies.Autofac.Extensions.UseImplementationsOfExtension.UseImplementationsOf``1(ArrangeDependencies.Core.Interfaces.IArrangeBuilder{Autofac.ContainerBuilder},System.Reflection.Assembly[])">
            <summary>
            Unsing all implementations of T in provided assemblies
            </summary>
            <typeparam name="TInterface"></typeparam>
            <param name="arrangeBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:ArrangeDependencies.Autofac.Extensions.UseMockExtension.UseMock``1(ArrangeDependencies.Core.Interfaces.IArrangeBuilder{Autofac.ContainerBuilder},System.Action{Moq.Mock{``0}})">
            <summary>
            Define a mock of a dependency that will be used in testing
            </summary>
            <typeparam name="TMock"></typeparam>
            <param name="arrangeBuilder"></param>
            <param name="mock"></param>
            <returns></returns>
        </member>
        <member name="M:ArrangeDependencies.Autofac.Extensions.UseMockExtension.UseMock``1(ArrangeDependencies.Core.Interfaces.IArrangeBuilder{Autofac.ContainerBuilder},System.Action{Moq.Mock{``0}},Moq.Mock{``0}@)">
            <summary>
            Define a mock of a dependency that will be used in testing
            Produces the <typeparamref name="TMock"/> as out parameter
            </summary>
            <typeparam name="TMock"></typeparam>
            <param name="arrangeBuilder"></param>
            <param name="mock"></param>
            <returns></returns>
        </member>
        <member name="M:ArrangeDependencies.Autofac.Extensions.UseMockExtension.UseMock``1(ArrangeDependencies.Core.Interfaces.IArrangeBuilder{Autofac.ContainerBuilder},Moq.Mock{``0}@)">
            <summary>
            Define a Mock.Of&lt;<typeparamref name="TMock"/>&gt; of a dependency that will be used in testing
            Produces the <typeparamref name="TMock"/> as out parameter
            </summary>
            <typeparam name="TMock"></typeparam>
            <param name="arrangeBuilder"></param>
            <param name="mock"></param>
            <returns></returns>
        </member>
    </members>
</doc>
